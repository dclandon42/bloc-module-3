Exercises

1. Write pseudocode for bubble sort.

FUNCTION bubbleSort(collection)
  
   REPEAT
     SET swapped to false

     FOR i = FIRST INDEX of collection to LAST INDEX of collection - 1
       IF collection[i] > collection[i + 1] THEN
         SET tmp to collection[i]
         SET collection[i] to collection[i + 1]
         SET collection[i + 1] to tmp
         SET swapped to true
       END IF
     END FOR
   UNTIL swapped is FALSE

   RETURN collection
 END FUNCTION

2. Write pseudocode for quicksort.

FUNCTION quickSort(collection)
  SET low to 0
  SET high to collection -1
    IF low < high THEN
        SET pivot to partition WITH collection, low ,high
        CALL quickSort WITH collection, low, pivot
        CALL quickSort WITH collection, pivot + 1, high
    END IF
END FUNCTION

FUNCTION partition(collection, low, high){
     SET pivot to collection[low]
     SET leftwall to low

     FOR each item in collection
         IF collection[i] < pivot THEN
             swap collection[i] with collection[leftwall + 1]
             SET leftwall to leftwall + 1
         END IF
     END FOR
     swap WITH pivot, collection[leftwall]

    RETURN leftwall

3. We talked about time complexity in a previous checkpoint, and how to get an idea of the efficiency of an algorithm. After looking at the pseudocode for the above sorting methods, identify why merge sort and quick sort are much more efficient than the others. Walking through each algorithm with a few sample collections may help.

Merge sort is effienct at handling large amounts of data without having to iterate over the same elements again and again. Quick sort is efficient because when using large data sets quick sort doesn't require comparison between every item.

4. All of the sorts addressed in this checkpoint are known as comparison sorts. Research bucket sort and explain how it works. What is the ideal input for bucket sort?

Bucket sort takes an unsorted array and uses the elements range to create buckets for sorting the elements into. within each bucket the elements are sorted and then rejoined with the other buckets to become one array again. This method is best when data is close to being uniform already or when there is a way to chooses the buckets based on a heuristic. 