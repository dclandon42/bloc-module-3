Exercises

1. The main difference between a stack and a queue is that a stack is taken out by last in first out order, while a queue is first in first out. Basically if there were an accumulating pile of papers, a stack would work at them from the most recent top paper, whereas a queue would work at the oldest one at the bottom of the pile.

2. Both stacks and queues are a structures for data and manage how tasks are prioritized and organized.

3. For the undo I would use the stack data structure because I would want the most recent edit to be undone. For the redo I would use the stack data structure too because I would want the most recent undone action to be redone. 


Programming Questions

1) Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".
 function reverseString(string){
  var splitString = string.split("");
  var reverseArray = splitString.reverse();
  var joinArray = reverseArray.join("");
    console.log(joinArray);
}
reverseString("Bloc");

2. Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.


 class Stack {
    constructor(){
     this.pop = function(queue){
       var newQueue = [];
       var itemToRemove = [];
       
       for(var i=0;i<queue.length; i++){
         if(i==queue.length-1){
           itemToRemove.push(queue[i]);
         }else{
           newQueue.push(queue[i]);
         }
       }
       
       return itemToRemove;   
       
     }
   }
}

var stack = new Stack();
console.log(stack.pop('Dylan'))


 3. Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.


class Queue {
   constructor(){
     this.elements = []
   }
  
 // enqueue function

  enqueue(element)
{    
    this.elements.push(element);
}

  // dequeue function

  dequeue()
{
    if(this.isEmpty())
        return "Empty";
    return this.elements.shift();
}
  
isEmpty()
{
    return this.elements.length ==0;
}

}

var queue = new Queue();

queue.enqueue(10)
queue.enqueue(10)

console.log(queue)
queue.dequeue()
console.log(queue)