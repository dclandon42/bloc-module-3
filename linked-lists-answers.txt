###EXERCISES

1. Pros of using linked lists: Not restricted to a declared number of elements. Easily add or remove elements without relocation or reorganization of the structure.
Cons of using linked lists: Nodes must be accessed sequentially from the start of the list. Searching is slow. Each element requires extra memory space. 

2. A real world example would be article chunks in a newspaper where each piece of the article is one element or node. For instance imagine there is a cover story, but to maximize cover page space there is a page number for continued reading of the article, then on the second chunk of the article there is another "continue reading on page...". This is similar to the setup of a linked list in that you would need to start at the first one to find the next and so on, it also is used to save space in a similar way.

### PROGRAMMING

1. LinkedList.prototype.push = function(val){  
    var node = {
       value: val,
       next: null
    }
  
    if(!this.head){
      this.head = node;  
      this.length += 1;    
      return node;
    }
    else{
      current = this.head;
      
      while(current.next){  
        current = current.next;
      }
      
      current.next = node;
      this.length += 1;
      return node;
    }
  }

There is a missing while loop in the pseudocode. This means that there is nothing progressing from one node chunk to the next.

2.
function LinkedList(){
  this.head= null;
  this.length=0;
}

LinkedList.prototype.push = function(val){  
    var node = {
       value: val,
       next: null
    }
  
    if(!this.head){
      this.head = node;  
      this.length += 1;    
      return node;
    }
    else{
      current = this.head;
      while(current.next){
        current = current.next;
      }
      current.next = node;
      this.length += 1;
      return node;
    }
  }

LinkedList.prototype.duplicate = function(){
 if (!this.head || !this.head.next) {
      console.log("no duplicates");
      return;
  }

    var thisNode = this.head;
    while (thisNode != null) {
      var previousNode = thisNode;
      var nextNode = thisNode.next;
      while (nextNode != null) {
        if (thisNode.value == nextNode.value) {
          previousNode.next = nextNode.next;
          this.length --;
        } else {
          previousNode = nextNode;
        }
        nextNode = nextNode.next;
      }
      thisNode = thisNode.next;
    }
    return this;
  }

list= new LinkedList()
list.push(5);
list.push(4);
list.push(1);
list.push(1);
list.duplicate()

3.
function LinkedList(){
  this.head= null;
  this.length=0;
}

LinkedList.prototype.push = function(val){  
    var node = {
       value: val,
       next: null
    }
  
    if(!this.head){
      this.head = node;  
      this.length += 1;    
      return node;
    }
    else{
      current = this.head;
      while(current.next){
        current = current.next;
      }
      current.next = node;
      this.length += 1;
      return node;
    }
  }

LinkedList.prototype.duplicate = function(){
 if (!this.head || !this.head.next) {
      console.log("no duplicates");
  }

    var thisNode = this.head;
    while (thisNode != null) {
      var previousNode = thisNode;
      var nextNode = thisNode.next;
      while (nextNode != null) {
        if (thisNode.value == nextNode.value) {
          previousNode.next = nextNode.next;
          this.length --;
        } else {
          previousNode = nextNode;
        }
        nextNode = nextNode.next;
      }
      thisNode = thisNode.next;
    }
    return this;
  }

LinkedList.prototype.reverse= function() {
    var previousNode = null;
    var thisNode = this.head;
    var nextNode;

    while (thisNode) {
      nextNode = thisNode.next;
      thisNode.next = previousNode;
      previousNode = thisNode;
      thisNode = nextNode;
    }

    this.head = previousNode;
  }


   
list= new LinkedList()
list.push(5);
list.push(3);
list.push(1);
list.push(4);
list.reverse()