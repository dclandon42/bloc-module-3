Exercises

What is a binary tree and what makes it unique to other trees?

A binary search tree is a hierarchical structure consisting of a root node that can have two child nodes and each child node can have two.

What is a heuristic? A heuristic is a best guess that an algorithm makes in order to solve a complex problem sooner but sacrifices accuracy.

What is another problem besides the shortest-path problem that requires the use of heuristics?

Another problem solved by heuristics would be in psychology they are discussed to try in a sense of how to interact with a person. There is not always time and opportunity to accurately understand every persons identity, so instead people make judgments based on appearance and small interactions to calculate what kind of norms and behaviors are appropriate. 

What is the difference between a depth-first search and a breadth-first search?

Depth first search builds as many child nodes as possible with the fewest number of children per node, while breadth first employs the maximum number of children per node first.

Explain in your own words what an undirected, a-cyclic, unweighted graph is.

An undirected a-cyclic, unweighted graph is one that does not have a cost between node travel, it is traversable in any direction, and it is not a loop, meaning it usually would have a node connected on only one side.

What kind of graph is a binary search tree?

A binary search tree is an unweighted, A-cyclic, directed graph.

Programming Questions

For the following questions, describe in words how you could solve the problem and then do so.

1. Using a while loop with a nested if statement, I am checking if the value entered matches a value in the tree.

function searchTree (value) {
	let current = tree;
  while (current) {
  	if(current.value == value) {
    	return true;
    } else if (current.value > value) {
    	current = current.left;
    } else {
    	current = current.right;
    }
  }
  return false;
}

console.log(searchTree(1));
console.log(searchTree(2));

2. First, I am using the getPath function to find the value then push its path into an array. Then there is a function that compares indices in the array to find the last common denominator. Then adding up the distance based on the number of remaining indices.

function getPath (value) {
	let current = tree;
  var array = ['tree'];
  while (current) {
  	if(current.value == value) {
    	array.push('value');
    	return array;
    } else if (current.value > value) {
    	array.push('left');
    	current = current.left;
    } else {
    	array.push('right')
    	current = current.right;
    }
  }
  return false;
}

function findDistance(n1, n2) {
  var n1 = getPath(n1);
  var n2 = getPath(n2);
  
  for (let i = 0; i < n1.length; i++) {
    if(n1[i] !== n2[i]) {
      var distance = ((n1.length - i) + (n2.length - i) - 2);
      return distance;
    }
  }
  
}

console.log(findDistance(4, 10));
console.log(findDistance(8, 10));