Exercises

What is a binary tree and what makes it unique to other trees?

A binary search tree is a hierarchical structure consisting of a root node that can have two child nodes and each child node can have two.

What is a heuristic? A heuristic is a best guess that an algorithm makes in order to solve a complex problem sooner but sacrifices accuracy.

What is another problem besides the shortest-path problem that requires the use of heuristics?

Another problem solved by heuristics would be in psychology they are discussed to try in a sense of how to interact with a person. There is not always time and opportunity to accurately understand every persons identity, so instead people make judgments based on appearance and small interactions to calculate what kind of norms and behaviors are appropriate. 

What is the difference between a depth-first search and a breadth-first search?

Depth first search builds as many child nodes as possible with the fewest number of children per node, while breadth first employs the maximum number of children per node first.

Explain in your own words what an undirected, a-cyclic, unweighted graph is.

An undirected a-cyclic, unweighted graph is one that does not have a cost between node travel, it is traversable in any direction, and it is not a loop, meaning it usually would have a node connected on only one side.

What kind of graph is a binary search tree?

A binary search tree is an unweighted, A-cyclic, directed graph.

Programming Questions

For the following questions, describe in words how you could solve the problem and then do so.

Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.

function findNumber(numberToFind) {
  var currentNode = this.root;

  while (currentNode != null) {
    if (numberToFind === currentNode.value) {
      return "The value " + currentNode.value + " exists in the list";
    } else if (numberToFind < currentNode.value){
      currentNode = currentNode.left;
    } else {
      currentNode = currentNode.right;
    }
  }
  return "The value " + numberToFind + " does not exist in the list";
}


Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.

Example: The distance between the nodes 4 and 10 is 4. The distance between the nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.

If both keys are greater than current node, we move to right child of current node.
If both keys are smaller than current node, we move to left child of current node.
If one keys is smaller and other key is greater, current node is Lowest Common Ancestor (LCA) of two nodes. We find distances of current node from two keys and return sum of the distances.

function getDistanace(root, node1, node2) {

  var ancestor = LCA(root, node1, node2);
  var depth1 = getDepth(root, ancestor); 
  var depth2 = getDepth(root, node1); 
  var depth3 = getDepth(root, node2); 

  return depth2 + depth3 - 2 * depth1;
}

function LCA(currentNode, node1, node2) {
  if (currentNode == null)
    return null;
  if (currentNode == node1 || currentNode == node2)
    return currentNode;
  var left = LCA(currentNode.left, node1, node2); 
  var right = LCA(currentNode.right, node1, node2); 
  if(left != null && right != null)
    return currentNode;
  return left == null? right: left;
}

function getDepth(currentNode, targetNode) {
  if (currentNode == null)
    return -1;
  if (currentNode == targetNode)
    return 0;
  var left = getDepth(currentNode.left, targetNode);
  var right = getDepth(currentNode.right, targetNode);
  if (left == -1 && right == -1)
    return -1;
  return left == -1? right + 1: left + 1;
}